{"version":3,"sources":["game/Square.js","game/Board.js","App.js","index.js"],"names":["Square","uid","square","aktywny","value","player","zmiana","className","onClick","MakeDefaultsStore","store","_base","A","extra","B","C","D","E","F","_pathsForPlayers","dawid","damian","_render","receipt","resolve","reject","reason","getFirstPlayer","getPlayerPath","this","map","nextPlayer","renderSquares","kolumna","flat","Board","startGameLoop","a","console","log","error","dice","rzucamy_kostką","polaDoAktywacji","zwraca_pola_do_aktywacji","length","koniec_tury","czekaj_na_wskazanie_pola","pole","targetSquare","wykonaj_ruch","czy_wygrał_gracz","change_player","warn","koniec_gry","wynikKostki","Math","floor","random","forEach","idx","squares","push","czy_jest_jakiekolwiek_aktywne_pole","isActive","state","some","el","pola","Promise","playerPath","sourceIndex","findIndex","sourceSquare","alert","handleClick","key","React","Component","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.c9aba215.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./Square.scss\";\r\n\r\nconst Square = ({ uid, square, aktywny, value, player, zmiana }) => (\r\n  <button\r\n    className={aktywny ? \"bodyActive\" : \"bodyInactive\"}\r\n    onClick={() => {\r\n      // console.log(\"Square.js \", { position, value, player });\r\n      zmiana(square);\r\n    }}\r\n  >\r\n    {value} {player}\r\n  </button>\r\n);\r\n\r\n// onClick={() => console.log({position, value, player})\r\n\r\nexport default Square;\r\n","import React from \"react\";\r\nimport Square from \"./Square\";\r\nimport \"./Board.scss\";\r\n// import MakeDefaultsSquares from \"./STATE.js\";\r\n\r\nfunction MakeDefaultsStore() {\r\n  const store = {\r\n    _base: {\r\n      ///\r\n      A: { uid: \"A\", value: 2, player: \"dawid\", aktywny: false, extra: false },\r\n      B: { uid: \"B\", value: 0, player: null, aktywny: false, extra: false },\r\n      C: { uid: \"C\", value: 0, player: null, aktywny: false, extra: false },\r\n      D: { uid: \"D\", value: 2, player: \"damian\", aktywny: false, extra: false },\r\n      E: { uid: \"E\", value: 0, player: null, aktywny: false, extra: false },\r\n      F: { uid: \"F\", value: 0, player: null, aktywny: false, extra: false }\r\n    },\r\n    _pathsForPlayers: {\r\n      ///\r\n      dawid: [\"A\", \"B\", \"E\", \"F\"],\r\n      damian: [\"D\", \"E\", \"B\", \"C\"]\r\n    },\r\n    _render: [\r\n      ///\r\n      [\"A\", \"B\", \"C\"],\r\n      [\"D\", \"E\", \"F\"]\r\n    ],\r\n    receipt: {\r\n      resolve: value => {},\r\n      reject: reason => {}\r\n    },\r\n    getFirstPlayer() {\r\n      return \"dawid\";\r\n    },\r\n    getPlayerPath(player) {\r\n      // TODO: Co jak player nie istnieje?\r\n      return this._pathsForPlayers[player].map(uid => {\r\n        return this._base[uid];\r\n      });\r\n    },\r\n    nextPlayer: player => {\r\n      return player === \"dawid\" ? \"damian\" : \"dawid\";\r\n    },\r\n    renderSquares() {\r\n      return this._render\r\n        .map(kolumna => kolumna.map(uid => this._base[uid]))\r\n        .flat();\r\n    }\r\n  };\r\n  store.receipt = null;\r\n  return store;\r\n}\r\n\r\n///\r\n\r\n// const store = MakeDefaultsStore();\r\n// console.debug(`DEBUG:`, store.getPlayerPath(\"dawid\"));\r\n\r\n///\r\n\r\nclass Board extends React.Component {\r\n  store = MakeDefaultsStore();\r\n\r\n  startGameLoop = async () => {\r\n    const store = this.store;\r\n\r\n    let player = store.getFirstPlayer();\r\n\r\n    console.log(`START GRY, zaczyna: ${player}`);\r\n\r\n    while (true) {\r\n      // początek tury\r\n      console.error(`Teraz player: ${player}`);\r\n\r\n      const dice = this.rzucamy_kostką();\r\n      const polaDoAktywacji = this.zwraca_pola_do_aktywacji({\r\n        store,\r\n        dice,\r\n        player\r\n      });\r\n\r\n      if (polaDoAktywacji.length === 0) {\r\n        player = store.nextPlayer(player);\r\n        this.koniec_tury();\r\n        continue;\r\n      }\r\n\r\n      const pole = await this.czekaj_na_wskazanie_pola(polaDoAktywacji);\r\n      console.log(`czekaj_na_wskazanie_pola zrwóciło: `, pole);\r\n\r\n      const targetSquare = this.wykonaj_ruch({ store, pole, dice, player });\r\n\r\n      if (this.czy_wygrał_gracz({ store, player })) {\r\n        break;\r\n      }\r\n\r\n      if (!targetSquare.extra) {\r\n        player = this.change_player(player);\r\n        console.warn(\"::WHILE:: sprawdź extra: Zmiana gracza.\");\r\n      }\r\n\r\n      this.koniec_tury();\r\n    }\r\n    //\r\n\r\n    this.koniec_gry(player);\r\n    console.log(`Gra się zakończyła, wygrał player: `, player);\r\n  };\r\n\r\n  rzucamy_kostką = () => {\r\n    const wynikKostki = Math.floor(Math.random() * (4 - 0 + 1) + 0);\r\n    console.log(`wynik kostki:`, wynikKostki);\r\n    return wynikKostki;\r\n  };\r\n\r\n  zwraca_pola_do_aktywacji = ({ store, dice, player }) => {\r\n    const polaDoAktywacji = [];\r\n\r\n    const playerPath = store.getPlayerPath(player);\r\n\r\n    playerPath.forEach((square, idx, squares) => {\r\n      // TODO: Mona troche uprościć\r\n      if (!square.value <= 0) {\r\n        if (square.player === player) {\r\n          if (idx + dice <= squares.length - 1) {\r\n            const targetSquare = squares[idx + dice];\r\n            if (targetSquare.player !== player) {\r\n              square.aktywny = true;\r\n              polaDoAktywacji.push(square);\r\n            }\r\n          }\r\n        }\r\n      }\r\n    });\r\n\r\n    console.log(`zwraca_pola_do_aktywacji: `, polaDoAktywacji);\r\n    return polaDoAktywacji;\r\n  };\r\n\r\n  czy_jest_jakiekolwiek_aktywne_pole = player => {\r\n    const tab = this.state.squares;\r\n    const isActive = tab.some(function(el) {\r\n      return el.aktywny === true;\r\n    });\r\n    console.log(\"Jest aktywne pole\", isActive); //true\r\n    return isActive;\r\n  };\r\n\r\n  czekaj_na_wskazanie_pola = async pola => {\r\n    console.log(`czekaj_na_wskazanie_pola: AKTYWACJA: `, pola);\r\n\r\n    for (const square of pola) {\r\n      square.aktywny = true;\r\n    }\r\n\r\n    const pole = await new Promise((resolve, reject) => {\r\n      console.log(`włąśnie zrobił się nowy PROMISE`, this.receipt);\r\n      this.receipt = { resolve, reject };\r\n    });\r\n\r\n    for (const square of pola) {\r\n      square.aktywny = false;\r\n    }\r\n\r\n    return pole;\r\n  };\r\n\r\n  wykonaj_ruch = ({ store, pole, dice, player }) => {\r\n    const playerPath = store.getPlayerPath(player);\r\n    const sourceIndex = playerPath.findIndex(el => {\r\n      return el === pole.uid;\r\n    });\r\n    const sourceSquare = pole;\r\n    const targetSquare = playerPath[sourceIndex + dice];\r\n\r\n    const enemyOnTargetSquare =\r\n      targetSquare.player !== player && targetSquare.value > 0;\r\n\r\n    if (enemyOnTargetSquare) {\r\n      // TODO: Handle multiple peons on single square\r\n      const enemyFirstSquare = store.getPlayerPath(store.nextPlayer(player))[0];\r\n      enemyFirstSquare.value += targetSquare.value;\r\n      targetSquare.player = null;\r\n      targetSquare.value = 0;\r\n    }\r\n\r\n    sourceSquare.value -= 1;\r\n    targetSquare.player = player;\r\n    targetSquare.value += 1;\r\n\r\n    if (sourceSquare.value === 0) {\r\n      sourceSquare.player = null;\r\n    }\r\n\r\n    return targetSquare;\r\n  };\r\n\r\n  czy_wygrał_gracz = ({ store, player }) => {\r\n    const playerPath = store.getPlayerPath(player);\r\n    const lastSquare = playerPath[playerPath.length - 1];\r\n    return lastSquare.value === 2 ? true : false;\r\n  };\r\n\r\n  koniec_tury = () => {\r\n    console.log(`koniec tury`);\r\n  };\r\n\r\n  koniec_gry = () => {\r\n    console.log(`koniec gry; FUNKCJA, KONIEC GRY`);\r\n    alert(\"PRZESZEDŁEŚ CAŁA GRĘ!! GRATULUJĘ!!\");\r\n  };\r\n\r\n  handleClick = square => {\r\n    if (this.receipt) {\r\n      const potwierdzenie = this.receipt;\r\n      potwierdzenie.resolve(square);\r\n    } else {\r\n      console.error(\" !  ojjojoj, brakuje paragonu\");\r\n    }\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <>\r\n        <button onClick={this.startGameLoop}>START Gry</button>\r\n\r\n        <ul className=\"board\">\r\n          {this.store.renderSquares().map(square => (\r\n            <Square\r\n              key={square.uid}\r\n              {...square}\r\n              square={square}\r\n              zmiana={this.handleClick}\r\n            />\r\n          ))}\r\n        </ul>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Board;\r\n","import React from \"react\";\nimport \"./styles.scss\";\nimport Board from \"./game/Board\";\n\n// var player = 1;\n\n// // const numbers = [1, 2, 3, 4, 5];\n// const numbers = [1, 2];\n\n// const items = numbers.map((numbers) => <Tile uuid={numbers} />);\n\nconst App = () => (\n  <>\n    <div>\n      <Board />\n    </div>\n  </>\n);\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}